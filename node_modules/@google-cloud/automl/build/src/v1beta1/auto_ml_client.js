"use strict";
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoMlClient = void 0;
/* global window */
const gax = require("google-gax");
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v1beta1/auto_ml_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./auto_ml_client_config.json");
const google_gax_1 = require("google-gax");
const version = require('../../../package.json').version;
/**
 *  AutoML Server API.
 *
 *  The resource names are assigned by the server.
 *  The server never reuses names that it has created after the resources with
 *  those names are deleted.
 *
 *  An ID of a resource is the last element of the item's resource name. For
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`, then
 *  the id for the item is `{dataset_id}`.
 *
 *  Currently the only supported `location_id` is "us-central1".
 *
 *  On any input that is documented to expect a string parameter in
 *  snake_case or kebab-case, either of those cases is accepted.
 * @class
 * @memberof v1beta1
 */
class AutoMlClient {
    /**
     * Construct an instance of AutoMlClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP fallback mode.
     *     In fallback mode, a special browser-compatible transport implementation is used
     *     instead of gRPC transport. In browser context (if the `window` object is defined)
     *     the fallback mode is enabled automatically; set `options.fallback` to `false`
     *     if you need to override this behavior.
     */
    constructor(opts) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gax.fallback : gax;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = staticMembers.servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === staticMembers.servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else if (opts.fallback === 'rest') {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            annotationSpecPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/datasets/{dataset}/annotationSpecs/{annotation_spec}'),
            columnSpecPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/datasets/{dataset}/tableSpecs/{table_spec}/columnSpecs/{column_spec}'),
            datasetPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/datasets/{dataset}'),
            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),
            modelPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/models/{model}'),
            modelEvaluationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/models/{model}/modelEvaluations/{model_evaluation}'),
            tableSpecPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/datasets/{dataset}/tableSpecs/{table_spec}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listDatasets: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'datasets'),
            listTableSpecs: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'tableSpecs'),
            listColumnSpecs: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'columnSpecs'),
            listModels: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'model'),
            listModelEvaluations: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'modelEvaluation'),
        };
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        // This API contains "long-running operations", which return a
        // an Operation object that allows for tracking of the operation,
        // rather than holding a request open.
        this.operationsClient = this._gaxModule
            .lro({
            auth: this.auth,
            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
        })
            .operationsClient(opts);
        const deleteDatasetResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteDatasetMetadata = protoFilesRoot.lookup('.google.cloud.automl.v1beta1.OperationMetadata');
        const importDataResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const importDataMetadata = protoFilesRoot.lookup('.google.cloud.automl.v1beta1.OperationMetadata');
        const exportDataResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const exportDataMetadata = protoFilesRoot.lookup('.google.cloud.automl.v1beta1.OperationMetadata');
        const createModelResponse = protoFilesRoot.lookup('.google.cloud.automl.v1beta1.Model');
        const createModelMetadata = protoFilesRoot.lookup('.google.cloud.automl.v1beta1.OperationMetadata');
        const deleteModelResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteModelMetadata = protoFilesRoot.lookup('.google.cloud.automl.v1beta1.OperationMetadata');
        const deployModelResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deployModelMetadata = protoFilesRoot.lookup('.google.cloud.automl.v1beta1.OperationMetadata');
        const undeployModelResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const undeployModelMetadata = protoFilesRoot.lookup('.google.cloud.automl.v1beta1.OperationMetadata');
        const exportModelResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const exportModelMetadata = protoFilesRoot.lookup('.google.cloud.automl.v1beta1.OperationMetadata');
        const exportEvaluatedExamplesResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const exportEvaluatedExamplesMetadata = protoFilesRoot.lookup('.google.cloud.automl.v1beta1.OperationMetadata');
        this.descriptors.longrunning = {
            deleteDataset: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteDatasetResponse.decode.bind(deleteDatasetResponse), deleteDatasetMetadata.decode.bind(deleteDatasetMetadata)),
            importData: new this._gaxModule.LongrunningDescriptor(this.operationsClient, importDataResponse.decode.bind(importDataResponse), importDataMetadata.decode.bind(importDataMetadata)),
            exportData: new this._gaxModule.LongrunningDescriptor(this.operationsClient, exportDataResponse.decode.bind(exportDataResponse), exportDataMetadata.decode.bind(exportDataMetadata)),
            createModel: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createModelResponse.decode.bind(createModelResponse), createModelMetadata.decode.bind(createModelMetadata)),
            deleteModel: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteModelResponse.decode.bind(deleteModelResponse), deleteModelMetadata.decode.bind(deleteModelMetadata)),
            deployModel: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deployModelResponse.decode.bind(deployModelResponse), deployModelMetadata.decode.bind(deployModelMetadata)),
            undeployModel: new this._gaxModule.LongrunningDescriptor(this.operationsClient, undeployModelResponse.decode.bind(undeployModelResponse), undeployModelMetadata.decode.bind(undeployModelMetadata)),
            exportModel: new this._gaxModule.LongrunningDescriptor(this.operationsClient, exportModelResponse.decode.bind(exportModelResponse), exportModelMetadata.decode.bind(exportModelMetadata)),
            exportEvaluatedExamples: new this._gaxModule.LongrunningDescriptor(this.operationsClient, exportEvaluatedExamplesResponse.decode.bind(exportEvaluatedExamplesResponse), exportEvaluatedExamplesMetadata.decode.bind(exportEvaluatedExamplesMetadata)),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.automl.v1beta1.AutoMl', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = gax.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.autoMlStub) {
            return this.autoMlStub;
        }
        // Put together the "service stub" for
        // google.cloud.automl.v1beta1.AutoMl.
        this.autoMlStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.cloud.automl.v1beta1.AutoMl')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.cloud.automl.v1beta1.AutoMl, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const autoMlStubMethods = [
            'createDataset',
            'getDataset',
            'listDatasets',
            'updateDataset',
            'deleteDataset',
            'importData',
            'exportData',
            'getAnnotationSpec',
            'getTableSpec',
            'listTableSpecs',
            'updateTableSpec',
            'getColumnSpec',
            'listColumnSpecs',
            'updateColumnSpec',
            'createModel',
            'getModel',
            'listModels',
            'deleteModel',
            'deployModel',
            'undeployModel',
            'exportModel',
            'exportEvaluatedExamples',
            'getModelEvaluation',
            'listModelEvaluations',
        ];
        for (const methodName of autoMlStubMethods) {
            const callPromise = this.autoMlStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] ||
                this.descriptors.longrunning[methodName] ||
                undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.autoMlStub;
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        return 'automl.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        return 'automl.googleapis.com';
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return ['https://www.googleapis.com/auth/cloud-platform'];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    createDataset(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.createDataset(request, options, callback);
    }
    getDataset(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.getDataset(request, options, callback);
    }
    updateDataset(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                'dataset.name': request.dataset.name || '',
            });
        this.initialize();
        return this.innerApiCalls.updateDataset(request, options, callback);
    }
    getAnnotationSpec(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.getAnnotationSpec(request, options, callback);
    }
    getTableSpec(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.getTableSpec(request, options, callback);
    }
    updateTableSpec(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                'table_spec.name': request.tableSpec.name || '',
            });
        this.initialize();
        return this.innerApiCalls.updateTableSpec(request, options, callback);
    }
    getColumnSpec(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.getColumnSpec(request, options, callback);
    }
    updateColumnSpec(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                'column_spec.name': request.columnSpec.name || '',
            });
        this.initialize();
        return this.innerApiCalls.updateColumnSpec(request, options, callback);
    }
    getModel(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.getModel(request, options, callback);
    }
    getModelEvaluation(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.getModelEvaluation(request, options, callback);
    }
    deleteDataset(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.deleteDataset(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteDataset()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/auto_ml.delete_dataset.js</caption>
     * region_tag:automl_v1beta1_generated_AutoMl_DeleteDataset_async
     */
    async checkDeleteDatasetProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.deleteDataset, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    importData(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.importData(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `importData()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/auto_ml.import_data.js</caption>
     * region_tag:automl_v1beta1_generated_AutoMl_ImportData_async
     */
    async checkImportDataProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.importData, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    exportData(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.exportData(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `exportData()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/auto_ml.export_data.js</caption>
     * region_tag:automl_v1beta1_generated_AutoMl_ExportData_async
     */
    async checkExportDataProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.exportData, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    createModel(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.createModel(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createModel()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/auto_ml.create_model.js</caption>
     * region_tag:automl_v1beta1_generated_AutoMl_CreateModel_async
     */
    async checkCreateModelProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.createModel, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deleteModel(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.deleteModel(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteModel()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/auto_ml.delete_model.js</caption>
     * region_tag:automl_v1beta1_generated_AutoMl_DeleteModel_async
     */
    async checkDeleteModelProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.deleteModel, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deployModel(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.deployModel(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deployModel()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/auto_ml.deploy_model.js</caption>
     * region_tag:automl_v1beta1_generated_AutoMl_DeployModel_async
     */
    async checkDeployModelProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.deployModel, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    undeployModel(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.undeployModel(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `undeployModel()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/auto_ml.undeploy_model.js</caption>
     * region_tag:automl_v1beta1_generated_AutoMl_UndeployModel_async
     */
    async checkUndeployModelProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.undeployModel, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    exportModel(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.exportModel(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `exportModel()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/auto_ml.export_model.js</caption>
     * region_tag:automl_v1beta1_generated_AutoMl_ExportModel_async
     */
    async checkExportModelProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.exportModel, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    exportEvaluatedExamples(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.exportEvaluatedExamples(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `exportEvaluatedExamples()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/auto_ml.export_evaluated_examples.js</caption>
     * region_tag:automl_v1beta1_generated_AutoMl_ExportEvaluatedExamples_async
     */
    async checkExportEvaluatedExamplesProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.exportEvaluatedExamples, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    listDatasets(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.listDatasets(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the project from which to list datasets.
     * @param {string} request.filter
     *   An expression for filtering the results of the request.
     *
     *     * `dataset_metadata` - for existence of the case (e.g.
     *               `image_classification_dataset_metadata:*`). Some examples of
     *               using the filter are:
     *
     *     * `translation_dataset_metadata:*` --> The dataset has
     *                                            `translation_dataset_metadata`.
     * @param {number} request.pageSize
     *   Requested page size. Server may return fewer results than requested.
     *   If unspecified, server will pick a default size.
     * @param {string} request.pageToken
     *   A token identifying a page of results for the server to return
     *   Typically obtained via
     *   {@link google.cloud.automl.v1beta1.ListDatasetsResponse.next_page_token|ListDatasetsResponse.next_page_token} of the previous
     *   {@link google.cloud.automl.v1beta1.AutoMl.ListDatasets|AutoMl.ListDatasets} call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Dataset]{@link google.cloud.automl.v1beta1.Dataset} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listDatasetsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listDatasetsStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listDatasets'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDatasets.createStream(this.innerApiCalls.listDatasets, request, callSettings);
    }
    /**
     * Equivalent to `listDatasets`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the project from which to list datasets.
     * @param {string} request.filter
     *   An expression for filtering the results of the request.
     *
     *     * `dataset_metadata` - for existence of the case (e.g.
     *               `image_classification_dataset_metadata:*`). Some examples of
     *               using the filter are:
     *
     *     * `translation_dataset_metadata:*` --> The dataset has
     *                                            `translation_dataset_metadata`.
     * @param {number} request.pageSize
     *   Requested page size. Server may return fewer results than requested.
     *   If unspecified, server will pick a default size.
     * @param {string} request.pageToken
     *   A token identifying a page of results for the server to return
     *   Typically obtained via
     *   {@link google.cloud.automl.v1beta1.ListDatasetsResponse.next_page_token|ListDatasetsResponse.next_page_token} of the previous
     *   {@link google.cloud.automl.v1beta1.AutoMl.ListDatasets|AutoMl.ListDatasets} call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Dataset]{@link google.cloud.automl.v1beta1.Dataset}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/auto_ml.list_datasets.js</caption>
     * region_tag:automl_v1beta1_generated_AutoMl_ListDatasets_async
     */
    listDatasetsAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listDatasets'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDatasets.asyncIterate(this.innerApiCalls['listDatasets'], request, callSettings);
    }
    listTableSpecs(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.listTableSpecs(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the dataset to list table specs from.
     * @param {google.protobuf.FieldMask} request.fieldMask
     *   Mask specifying which fields to read.
     * @param {string} request.filter
     *   Filter expression, see go/filtering.
     * @param {number} request.pageSize
     *   Requested page size. The server can return fewer results than requested.
     *   If unspecified, the server will pick a default size.
     * @param {string} request.pageToken
     *   A token identifying a page of results for the server to return.
     *   Typically obtained from the
     *   {@link google.cloud.automl.v1beta1.ListTableSpecsResponse.next_page_token|ListTableSpecsResponse.next_page_token} field of the previous
     *   {@link google.cloud.automl.v1beta1.AutoMl.ListTableSpecs|AutoMl.ListTableSpecs} call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [TableSpec]{@link google.cloud.automl.v1beta1.TableSpec} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listTableSpecsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listTableSpecsStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listTableSpecs'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listTableSpecs.createStream(this.innerApiCalls.listTableSpecs, request, callSettings);
    }
    /**
     * Equivalent to `listTableSpecs`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the dataset to list table specs from.
     * @param {google.protobuf.FieldMask} request.fieldMask
     *   Mask specifying which fields to read.
     * @param {string} request.filter
     *   Filter expression, see go/filtering.
     * @param {number} request.pageSize
     *   Requested page size. The server can return fewer results than requested.
     *   If unspecified, the server will pick a default size.
     * @param {string} request.pageToken
     *   A token identifying a page of results for the server to return.
     *   Typically obtained from the
     *   {@link google.cloud.automl.v1beta1.ListTableSpecsResponse.next_page_token|ListTableSpecsResponse.next_page_token} field of the previous
     *   {@link google.cloud.automl.v1beta1.AutoMl.ListTableSpecs|AutoMl.ListTableSpecs} call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [TableSpec]{@link google.cloud.automl.v1beta1.TableSpec}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/auto_ml.list_table_specs.js</caption>
     * region_tag:automl_v1beta1_generated_AutoMl_ListTableSpecs_async
     */
    listTableSpecsAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listTableSpecs'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listTableSpecs.asyncIterate(this.innerApiCalls['listTableSpecs'], request, callSettings);
    }
    listColumnSpecs(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.listColumnSpecs(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the table spec to list column specs from.
     * @param {google.protobuf.FieldMask} request.fieldMask
     *   Mask specifying which fields to read.
     * @param {string} request.filter
     *   Filter expression, see go/filtering.
     * @param {number} request.pageSize
     *   Requested page size. The server can return fewer results than requested.
     *   If unspecified, the server will pick a default size.
     * @param {string} request.pageToken
     *   A token identifying a page of results for the server to return.
     *   Typically obtained from the
     *   {@link google.cloud.automl.v1beta1.ListColumnSpecsResponse.next_page_token|ListColumnSpecsResponse.next_page_token} field of the previous
     *   {@link google.cloud.automl.v1beta1.AutoMl.ListColumnSpecs|AutoMl.ListColumnSpecs} call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [ColumnSpec]{@link google.cloud.automl.v1beta1.ColumnSpec} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listColumnSpecsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listColumnSpecsStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listColumnSpecs'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listColumnSpecs.createStream(this.innerApiCalls.listColumnSpecs, request, callSettings);
    }
    /**
     * Equivalent to `listColumnSpecs`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the table spec to list column specs from.
     * @param {google.protobuf.FieldMask} request.fieldMask
     *   Mask specifying which fields to read.
     * @param {string} request.filter
     *   Filter expression, see go/filtering.
     * @param {number} request.pageSize
     *   Requested page size. The server can return fewer results than requested.
     *   If unspecified, the server will pick a default size.
     * @param {string} request.pageToken
     *   A token identifying a page of results for the server to return.
     *   Typically obtained from the
     *   {@link google.cloud.automl.v1beta1.ListColumnSpecsResponse.next_page_token|ListColumnSpecsResponse.next_page_token} field of the previous
     *   {@link google.cloud.automl.v1beta1.AutoMl.ListColumnSpecs|AutoMl.ListColumnSpecs} call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [ColumnSpec]{@link google.cloud.automl.v1beta1.ColumnSpec}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/auto_ml.list_column_specs.js</caption>
     * region_tag:automl_v1beta1_generated_AutoMl_ListColumnSpecs_async
     */
    listColumnSpecsAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listColumnSpecs'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listColumnSpecs.asyncIterate(this.innerApiCalls['listColumnSpecs'], request, callSettings);
    }
    listModels(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.listModels(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Resource name of the project, from which to list the models.
     * @param {string} request.filter
     *   An expression for filtering the results of the request.
     *
     *     * `model_metadata` - for existence of the case (e.g.
     *               `video_classification_model_metadata:*`).
     *     * `dataset_id` - for = or !=. Some examples of using the filter are:
     *
     *     * `image_classification_model_metadata:*` --> The model has
     *                                        `image_classification_model_metadata`.
     *     * `dataset_id=5` --> The model was created from a dataset with ID 5.
     * @param {number} request.pageSize
     *   Requested page size.
     * @param {string} request.pageToken
     *   A token identifying a page of results for the server to return
     *   Typically obtained via
     *   {@link google.cloud.automl.v1beta1.ListModelsResponse.next_page_token|ListModelsResponse.next_page_token} of the previous
     *   {@link google.cloud.automl.v1beta1.AutoMl.ListModels|AutoMl.ListModels} call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Model]{@link google.cloud.automl.v1beta1.Model} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listModelsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listModelsStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listModels'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listModels.createStream(this.innerApiCalls.listModels, request, callSettings);
    }
    /**
     * Equivalent to `listModels`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Resource name of the project, from which to list the models.
     * @param {string} request.filter
     *   An expression for filtering the results of the request.
     *
     *     * `model_metadata` - for existence of the case (e.g.
     *               `video_classification_model_metadata:*`).
     *     * `dataset_id` - for = or !=. Some examples of using the filter are:
     *
     *     * `image_classification_model_metadata:*` --> The model has
     *                                        `image_classification_model_metadata`.
     *     * `dataset_id=5` --> The model was created from a dataset with ID 5.
     * @param {number} request.pageSize
     *   Requested page size.
     * @param {string} request.pageToken
     *   A token identifying a page of results for the server to return
     *   Typically obtained via
     *   {@link google.cloud.automl.v1beta1.ListModelsResponse.next_page_token|ListModelsResponse.next_page_token} of the previous
     *   {@link google.cloud.automl.v1beta1.AutoMl.ListModels|AutoMl.ListModels} call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Model]{@link google.cloud.automl.v1beta1.Model}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/auto_ml.list_models.js</caption>
     * region_tag:automl_v1beta1_generated_AutoMl_ListModels_async
     */
    listModelsAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listModels'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listModels.asyncIterate(this.innerApiCalls['listModels'], request, callSettings);
    }
    listModelEvaluations(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.listModelEvaluations(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Resource name of the model to list the model evaluations for.
     *   If modelId is set as "-", this will list model evaluations from across all
     *   models of the parent location.
     * @param {string} request.filter
     *   An expression for filtering the results of the request.
     *
     *     * `annotation_spec_id` - for =, !=  or existence. See example below for
     *                            the last.
     *
     *   Some examples of using the filter are:
     *
     *     * `annotation_spec_id!=4` --> The model evaluation was done for
     *                               annotation spec with ID different than 4.
     *     * `NOT annotation_spec_id:*` --> The model evaluation was done for
     *                                  aggregate of all annotation specs.
     * @param {number} request.pageSize
     *   Requested page size.
     * @param {string} request.pageToken
     *   A token identifying a page of results for the server to return.
     *   Typically obtained via
     *   {@link google.cloud.automl.v1beta1.ListModelEvaluationsResponse.next_page_token|ListModelEvaluationsResponse.next_page_token} of the previous
     *   {@link google.cloud.automl.v1beta1.AutoMl.ListModelEvaluations|AutoMl.ListModelEvaluations} call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [ModelEvaluation]{@link google.cloud.automl.v1beta1.ModelEvaluation} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listModelEvaluationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listModelEvaluationsStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listModelEvaluations'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listModelEvaluations.createStream(this.innerApiCalls.listModelEvaluations, request, callSettings);
    }
    /**
     * Equivalent to `listModelEvaluations`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Resource name of the model to list the model evaluations for.
     *   If modelId is set as "-", this will list model evaluations from across all
     *   models of the parent location.
     * @param {string} request.filter
     *   An expression for filtering the results of the request.
     *
     *     * `annotation_spec_id` - for =, !=  or existence. See example below for
     *                            the last.
     *
     *   Some examples of using the filter are:
     *
     *     * `annotation_spec_id!=4` --> The model evaluation was done for
     *                               annotation spec with ID different than 4.
     *     * `NOT annotation_spec_id:*` --> The model evaluation was done for
     *                                  aggregate of all annotation specs.
     * @param {number} request.pageSize
     *   Requested page size.
     * @param {string} request.pageToken
     *   A token identifying a page of results for the server to return.
     *   Typically obtained via
     *   {@link google.cloud.automl.v1beta1.ListModelEvaluationsResponse.next_page_token|ListModelEvaluationsResponse.next_page_token} of the previous
     *   {@link google.cloud.automl.v1beta1.AutoMl.ListModelEvaluations|AutoMl.ListModelEvaluations} call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [ModelEvaluation]{@link google.cloud.automl.v1beta1.ModelEvaluation}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/auto_ml.list_model_evaluations.js</caption>
     * region_tag:automl_v1beta1_generated_AutoMl_ListModelEvaluations_async
     */
    listModelEvaluationsAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listModelEvaluations'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listModelEvaluations.asyncIterate(this.innerApiCalls['listModelEvaluations'], request, callSettings);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified annotationSpec resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataset
     * @param {string} annotation_spec
     * @returns {string} Resource name string.
     */
    annotationSpecPath(project, location, dataset, annotationSpec) {
        return this.pathTemplates.annotationSpecPathTemplate.render({
            project: project,
            location: location,
            dataset: dataset,
            annotation_spec: annotationSpec,
        });
    }
    /**
     * Parse the project from AnnotationSpec resource.
     *
     * @param {string} annotationSpecName
     *   A fully-qualified path representing AnnotationSpec resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAnnotationSpecName(annotationSpecName) {
        return this.pathTemplates.annotationSpecPathTemplate.match(annotationSpecName).project;
    }
    /**
     * Parse the location from AnnotationSpec resource.
     *
     * @param {string} annotationSpecName
     *   A fully-qualified path representing AnnotationSpec resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromAnnotationSpecName(annotationSpecName) {
        return this.pathTemplates.annotationSpecPathTemplate.match(annotationSpecName).location;
    }
    /**
     * Parse the dataset from AnnotationSpec resource.
     *
     * @param {string} annotationSpecName
     *   A fully-qualified path representing AnnotationSpec resource.
     * @returns {string} A string representing the dataset.
     */
    matchDatasetFromAnnotationSpecName(annotationSpecName) {
        return this.pathTemplates.annotationSpecPathTemplate.match(annotationSpecName).dataset;
    }
    /**
     * Parse the annotation_spec from AnnotationSpec resource.
     *
     * @param {string} annotationSpecName
     *   A fully-qualified path representing AnnotationSpec resource.
     * @returns {string} A string representing the annotation_spec.
     */
    matchAnnotationSpecFromAnnotationSpecName(annotationSpecName) {
        return this.pathTemplates.annotationSpecPathTemplate.match(annotationSpecName).annotation_spec;
    }
    /**
     * Return a fully-qualified columnSpec resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataset
     * @param {string} table_spec
     * @param {string} column_spec
     * @returns {string} Resource name string.
     */
    columnSpecPath(project, location, dataset, tableSpec, columnSpec) {
        return this.pathTemplates.columnSpecPathTemplate.render({
            project: project,
            location: location,
            dataset: dataset,
            table_spec: tableSpec,
            column_spec: columnSpec,
        });
    }
    /**
     * Parse the project from ColumnSpec resource.
     *
     * @param {string} columnSpecName
     *   A fully-qualified path representing ColumnSpec resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromColumnSpecName(columnSpecName) {
        return this.pathTemplates.columnSpecPathTemplate.match(columnSpecName)
            .project;
    }
    /**
     * Parse the location from ColumnSpec resource.
     *
     * @param {string} columnSpecName
     *   A fully-qualified path representing ColumnSpec resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromColumnSpecName(columnSpecName) {
        return this.pathTemplates.columnSpecPathTemplate.match(columnSpecName)
            .location;
    }
    /**
     * Parse the dataset from ColumnSpec resource.
     *
     * @param {string} columnSpecName
     *   A fully-qualified path representing ColumnSpec resource.
     * @returns {string} A string representing the dataset.
     */
    matchDatasetFromColumnSpecName(columnSpecName) {
        return this.pathTemplates.columnSpecPathTemplate.match(columnSpecName)
            .dataset;
    }
    /**
     * Parse the table_spec from ColumnSpec resource.
     *
     * @param {string} columnSpecName
     *   A fully-qualified path representing ColumnSpec resource.
     * @returns {string} A string representing the table_spec.
     */
    matchTableSpecFromColumnSpecName(columnSpecName) {
        return this.pathTemplates.columnSpecPathTemplate.match(columnSpecName)
            .table_spec;
    }
    /**
     * Parse the column_spec from ColumnSpec resource.
     *
     * @param {string} columnSpecName
     *   A fully-qualified path representing ColumnSpec resource.
     * @returns {string} A string representing the column_spec.
     */
    matchColumnSpecFromColumnSpecName(columnSpecName) {
        return this.pathTemplates.columnSpecPathTemplate.match(columnSpecName)
            .column_spec;
    }
    /**
     * Return a fully-qualified dataset resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataset
     * @returns {string} Resource name string.
     */
    datasetPath(project, location, dataset) {
        return this.pathTemplates.datasetPathTemplate.render({
            project: project,
            location: location,
            dataset: dataset,
        });
    }
    /**
     * Parse the project from Dataset resource.
     *
     * @param {string} datasetName
     *   A fully-qualified path representing Dataset resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDatasetName(datasetName) {
        return this.pathTemplates.datasetPathTemplate.match(datasetName).project;
    }
    /**
     * Parse the location from Dataset resource.
     *
     * @param {string} datasetName
     *   A fully-qualified path representing Dataset resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDatasetName(datasetName) {
        return this.pathTemplates.datasetPathTemplate.match(datasetName).location;
    }
    /**
     * Parse the dataset from Dataset resource.
     *
     * @param {string} datasetName
     *   A fully-qualified path representing Dataset resource.
     * @returns {string} A string representing the dataset.
     */
    matchDatasetFromDatasetName(datasetName) {
        return this.pathTemplates.datasetPathTemplate.match(datasetName).dataset;
    }
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project, location) {
        return this.pathTemplates.locationPathTemplate.render({
            project: project,
            location: location,
        });
    }
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).project;
    }
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).location;
    }
    /**
     * Return a fully-qualified model resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} model
     * @returns {string} Resource name string.
     */
    modelPath(project, location, model) {
        return this.pathTemplates.modelPathTemplate.render({
            project: project,
            location: location,
            model: model,
        });
    }
    /**
     * Parse the project from Model resource.
     *
     * @param {string} modelName
     *   A fully-qualified path representing Model resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromModelName(modelName) {
        return this.pathTemplates.modelPathTemplate.match(modelName).project;
    }
    /**
     * Parse the location from Model resource.
     *
     * @param {string} modelName
     *   A fully-qualified path representing Model resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromModelName(modelName) {
        return this.pathTemplates.modelPathTemplate.match(modelName).location;
    }
    /**
     * Parse the model from Model resource.
     *
     * @param {string} modelName
     *   A fully-qualified path representing Model resource.
     * @returns {string} A string representing the model.
     */
    matchModelFromModelName(modelName) {
        return this.pathTemplates.modelPathTemplate.match(modelName).model;
    }
    /**
     * Return a fully-qualified modelEvaluation resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} model
     * @param {string} model_evaluation
     * @returns {string} Resource name string.
     */
    modelEvaluationPath(project, location, model, modelEvaluation) {
        return this.pathTemplates.modelEvaluationPathTemplate.render({
            project: project,
            location: location,
            model: model,
            model_evaluation: modelEvaluation,
        });
    }
    /**
     * Parse the project from ModelEvaluation resource.
     *
     * @param {string} modelEvaluationName
     *   A fully-qualified path representing ModelEvaluation resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromModelEvaluationName(modelEvaluationName) {
        return this.pathTemplates.modelEvaluationPathTemplate.match(modelEvaluationName).project;
    }
    /**
     * Parse the location from ModelEvaluation resource.
     *
     * @param {string} modelEvaluationName
     *   A fully-qualified path representing ModelEvaluation resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromModelEvaluationName(modelEvaluationName) {
        return this.pathTemplates.modelEvaluationPathTemplate.match(modelEvaluationName).location;
    }
    /**
     * Parse the model from ModelEvaluation resource.
     *
     * @param {string} modelEvaluationName
     *   A fully-qualified path representing ModelEvaluation resource.
     * @returns {string} A string representing the model.
     */
    matchModelFromModelEvaluationName(modelEvaluationName) {
        return this.pathTemplates.modelEvaluationPathTemplate.match(modelEvaluationName).model;
    }
    /**
     * Parse the model_evaluation from ModelEvaluation resource.
     *
     * @param {string} modelEvaluationName
     *   A fully-qualified path representing ModelEvaluation resource.
     * @returns {string} A string representing the model_evaluation.
     */
    matchModelEvaluationFromModelEvaluationName(modelEvaluationName) {
        return this.pathTemplates.modelEvaluationPathTemplate.match(modelEvaluationName).model_evaluation;
    }
    /**
     * Return a fully-qualified tableSpec resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataset
     * @param {string} table_spec
     * @returns {string} Resource name string.
     */
    tableSpecPath(project, location, dataset, tableSpec) {
        return this.pathTemplates.tableSpecPathTemplate.render({
            project: project,
            location: location,
            dataset: dataset,
            table_spec: tableSpec,
        });
    }
    /**
     * Parse the project from TableSpec resource.
     *
     * @param {string} tableSpecName
     *   A fully-qualified path representing TableSpec resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTableSpecName(tableSpecName) {
        return this.pathTemplates.tableSpecPathTemplate.match(tableSpecName)
            .project;
    }
    /**
     * Parse the location from TableSpec resource.
     *
     * @param {string} tableSpecName
     *   A fully-qualified path representing TableSpec resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTableSpecName(tableSpecName) {
        return this.pathTemplates.tableSpecPathTemplate.match(tableSpecName)
            .location;
    }
    /**
     * Parse the dataset from TableSpec resource.
     *
     * @param {string} tableSpecName
     *   A fully-qualified path representing TableSpec resource.
     * @returns {string} A string representing the dataset.
     */
    matchDatasetFromTableSpecName(tableSpecName) {
        return this.pathTemplates.tableSpecPathTemplate.match(tableSpecName)
            .dataset;
    }
    /**
     * Parse the table_spec from TableSpec resource.
     *
     * @param {string} tableSpecName
     *   A fully-qualified path representing TableSpec resource.
     * @returns {string} A string representing the table_spec.
     */
    matchTableSpecFromTableSpecName(tableSpecName) {
        return this.pathTemplates.tableSpecPathTemplate.match(tableSpecName)
            .table_spec;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.autoMlStub && !this._terminated) {
            return this.autoMlStub.then(stub => {
                this._terminated = true;
                stub.close();
                this.operationsClient.close();
            });
        }
        return Promise.resolve();
    }
}
exports.AutoMlClient = AutoMlClient;
//# sourceMappingURL=auto_ml_client.js.map